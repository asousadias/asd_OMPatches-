; OM File Header - Saved 2018/05/12 16:30:26
; (6.130002 :patc (om-make-point 24 24) (om-make-point 50 50) (om-make-point 500 400) "" 183 0 nil "2018/05/12 16:27:20")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "fractalize_rec" (quote ((om-load-boxcomment "comment1" (om-make-point 156 64) (quote "António de Sousa Dias$www.sousadias.com$rev. 2008") "" (om-make-point 21 495) nil (om-make-color 0.018735297 0.025613498 0.51131225) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 61 312) (om-make-point 27 31) 1 "1" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "one list" "LST" nil))) (om-make-point 155 195) nil nil nil nil 1) (om-load-boxcall (quote patch-box) "fractalise_rec" (quote ("elements" "asd_om_work" "asd_utilities" "fractalise-folder" "fractalize_rec")) (quote ((om-load-inputfun (quote input-funbox) "liste base" "l_base" (list 7200 7300 7000)) (om-load-inputfun (quote input-funbox) "distance base" "l_dist0" 1) (om-load-inputfun (quote input-funbox) "iterations" "iter" 1))) (om-make-point 317 250) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM<=" (quote om<=) (quote ((om-load-inputfun (quote input-funbox) "a number" "SELF" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM" 1))) (om-make-point 49 363) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "if" "TEST" nil) (om-load-inputfun (quote input-funbox) "then" "ACTION" nil) (om-load-inputfun (quote input-funbox) "else" "ELSE" nil))) (om-make-point 87 406) (om-make-point 296 53) nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 530 51) (om-make-point 20 27) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 489 96) (om-make-point 38 27) nil nil nil 1) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first list" "L1?" nil) (om-load-inputfun (quote input-funbox) "second list" "L2?" nil))) (om-make-point 274 340) (om-make-point 118 53) nil nil nil 1) (om-load-boxin "input2" 2 (om-make-point 385 1) "iterations" "iter" 1 nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil) (om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil))) (om-make-point 103 137) nil nil nil (list (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "N" "N" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 102 181) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 1))) (om-make-point 20 127) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 11 80) nil nil nil nil 1) (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low val" "FROM" 0) (om-load-inputfun (quote input-funbox) "high val" "TO" 10))) (om-make-point 34 186) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 207 210) (om-make-point 40 35) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 202 254) nil nil nil nil 3) (om-load-boxin "input1" 1 (om-make-point 344 57) "no documentation" "interp" nil nil) (om-load-boxin "input0" 0 (om-make-point 75 43) "no documentation" "liste base0" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 359 304) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 39 304) nil nil nil 0)) (quote ((3 0 0 0 nil 0) (7 0 0 1 nil 0) (2 0 1 0 nil 0) (7 0 2 0 nil 0) (1 0 3 1 nil 0) (0 0 4 0 nil 0) (6 0 4 1 nil 0) (4 0 5 0 nil 0) (5 1 8 0 nil 0) (5 0 9 0 nil 0))) 1 "omloop" nil) (om-load-boxout "output" 0 (om-make-point 254 528) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "input1" 1 (om-make-point 156 6) "distance base" "l_dist0" (list 0 100 -200) nil) (om-load-boxin "input" 0 (om-make-point 60 7) "liste base" "l_base" (list 7200 7300 7000) nil))) (quote ((10 0 2 0 nil 0) (2 0 3 0 nil 0) (12 0 3 1 nil 0) (7 0 3 2 nil 0) (9 0 4 0 nil 0) (1 0 4 1 nil 0) (4 0 5 0 nil 0) (10 0 5 1 nil 0) (8 0 5 2 nil 0) (9 0 7 0 nil 0) (6 0 7 1 nil 0) (10 0 8 0 nil 0) (3 0 8 1 nil 0) (13 0 10 0 nil 0) (12 0 10 1 nil 0) (5 0 11 0 nil 0))) nil 6.0))
