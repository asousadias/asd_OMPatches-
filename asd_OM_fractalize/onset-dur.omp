; OM File Header - Saved 2018/05/12 16:30:37
; (6.130002 :patc (om-make-point 457 412) (om-make-point 50 50) (om-make-point 500 400) "" 183 0 "2018/05/12 16:30:37" "2018/05/12 16:30:37")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "onset-dur" (quote ((let ((box (om-load-boxcomment "comment1" (om-make-point 121 55) (quote "this is to prevent the atom numbers.$It just adds brakets.") "" (om-make-point 350 178) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 122 71) (quote "this patch creates a dummy list - only to apply to onset and dur") "" (om-make-point 104 375) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "one list" "LST" nil))) (om-make-point 310 204) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 312 158) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 184 169) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 100 77) "onset" "offset" 0 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 219 15) "duration" "delta" 125 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output1" 1 (om-make-point 217 308) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "l_dur" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 62 307) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "l_onset" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 2 0 nil 0) (6 0 3 0 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (6 0 7 0 nil 0) (4 0 8 0 nil 0))) nil 6.130002))