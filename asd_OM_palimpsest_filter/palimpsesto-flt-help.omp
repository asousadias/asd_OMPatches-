;OM File Header - Saved 2010/01/12 10:36:43
; (6.0 :patc (om-make-point 77 42) (om-make-point 195 0) (om-make-point 1027 583) "non documentation" 183)
;End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "palimpsesto-flt-help" (quote ((om-load-boxcomment "comment3" (om-make-point 290 35) (quote "Evaluate here to save output as a MIDI file.") "" (om-make-point 417 512) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment3" (om-make-point 290 35) (quote "Evaluate here to see the resulting output.") "" (om-make-point 456 466) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 262 452) (quote "This patch transposes to the note domain the operations of filtering and morphing that we find in the audio domain.$His operating mode is anchored on the idea of palimpsest, and its operation mode can be described as follows: it takes two input MIDI files or chord-seq (a source file and a modulator file) and produces a third MIDI file according to one of two main operation modes (the Method parameter).$The first mode, keeps only the notes from the source file that are equal to the notes of the modulation file, or, in a slight variant possibility, it keeps those notes having the same pitch class. It is thus a resulting hybridization between spectral multiplication and the use of comb filters.$The second mode, rounds all notes from the source file to the nearest notes of the modulation file, or again, in a slight variant possibility, it rounds them to the near pitch class.$The 2009 version is a revised one where a Time Adjust parameter has been added to adjust the length of the two input chord sequences.") "" (om-make-point 3 31) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment2" (om-make-point 255 98) (quote "Time adjust (integer):$0-No change;$1-Length of Inp-1 set to length of Inp-2;$2 (or else) -Length of Inp-2 set to length of Inp-1.") "" (om-make-point 696 76) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 639 84) (om-make-point 37 28) 0 "0" nil) (om-load-boxcomment "comment1" (om-make-point 156 64) (quote "António de Sousa Dias$www.sousadias.com$2003, rev. 2008-2009") "" (om-make-point 2 473) nil (om-make-color 0.018735297 0.025613498 0.51131225) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 656 184) (om-make-point 37 28) 0 "0" nil) (om-load-boxcomment "comment" (om-make-point 180 93) (quote "Method (integer):$0-Band pass note;$1-Band pass pitch class;$2-Round to nearest note;$3-Round to nearest pitch class.") "" (om-make-point 698 177) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SAVE-AS-MIDI" (quote save-as-midi) (quote ((om-load-inputfun (quote input-funbox) "a music object to save" "OBJECT" nil))) (om-make-point 344 472) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ11" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 415 319) (om-make-point 476 145) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (6500) (6800) (7400) (6300))) :lonset (quote (250 2625 3000 3750 4375 5000)) :ldur (quote ((125) (125) (125) (125) (125))) :lvel (quote ((100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((2) (2) (2) (2) (2))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) 0 0 (om-make-point 10 40) (om-make-point 1237 422) 0 1000 nil 33/50 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 2)) t nil nil) (om-load-editor-box1 "CHORD-SEQ1" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 469 79) (om-make-point 152 138) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (5900 6500 6800 7400 8200 8800) (6300) (3700 7700 8800))) :lonset (quote (0 2000 4000 6000 8000)) :ldur (quote ((2000) (2000 2000 2000 2000 2000 2000) (2000) (2000 2000 2000))) :lvel (quote ((100) (100 100 100 100 100 100) (100) (100 100 100))) :loffset (quote ((0) (0 0 0 0 0 0) (0) (0 0 0))) :lchan (quote ((1) (1 1 1 1 1 1) (1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0 0 0 0 0) (0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) 0 0 (om-make-point 10 40) (om-make-point 887 433) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 2)) t nil nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 2)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 279 80) (om-make-point 178 136) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (7200) (7300) (7400) (7500) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (7200) (7300) (7400) (7500) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (7200) (7300) (7400) (7500) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (7200) (7300) (7400) (7500))) :lonset (quote (0 125 250 375 500 625 750 875 1000 1125 1250 1375 1500 1625 1750 1875 2000 2125 2250 2375 2500 2625 2750 2875 3000 3125 3250 3375 3500 3625 3750 3875 4000 4125 4250 4375 4500 4625 4750 4875 5000 5125 5250 5375 5500 5625 5750 5875 6000 6125 6250 6375 6500 6625 6750 6875 7000 7125 7250 7375 7500 7625 7750 7875 8000)) :ldur (quote ((125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) 0 0 (om-make-point 10 40) (om-make-point 1061 411) 0 1000 nil 41/10 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 2)) t nil nil) (om-load-boxcall (quote abstraction) "mypatch1" (om-load-patch-abs1 "inp2-patch" (quote ((om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 386 74) (om-make-point 92 49) (list 2000) "(2000)" nil) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 342 216) nil nil nil nil 1) (om-load-boxout "output2" 2 (om-make-point 470 314) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxout "output1" 1 (om-make-point 371 317) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 154 131) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 35 54) (om-make-point 260 48) (list (list 62) (list 59 65 68 74 82 88) (list 63) (list 37 77 88)) "((62) (59 65 68 74 82 88) (63) (37 77 88))" nil) (om-load-boxout "output" 0 (om-make-point 147 199) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (quote ((0 0 1 1 nil 0) (0 0 2 0 nil 0) (1 0 3 0 nil 0) (5 0 4 0 nil 0) (4 0 6 0 nil 0))) 6.0 nil) (quote nil) (om-make-point 503 11) nil nil nil "inp2-patch") (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "inp1-patch" (quote ((om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "one list" "LST" nil))) (om-make-point 271 303) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first list" "L1?" nil) (om-load-inputfun (quote input-funbox) "second list" "L2?" nil))) (om-make-point 36 161) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 68 40) (om-make-point 37 35) 60 "60" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 299 203) (om-make-point 22 37) 4 "4" nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 0))) (om-make-point 168 257) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 83 87) (om-make-point 118 35) nil nil nil 1) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 15) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 219 23) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 463 118) (om-make-point 67 32) (list 125) "(125)" nil) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 432 222) nil nil nil nil 1) (om-load-boxout "output2" 2 (om-make-point 484 317) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxout "output1" 1 (om-make-point 371 317) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 133 232) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 214 337) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (quote ((4 0 0 0 nil 0) (5 0 1 0 nil 0) (11 0 4 0 nil 0) (3 0 4 1 nil 0) (2 0 5 0 nil 0) (6 0 5 1 nil 0) (7 0 8 1 nil 0) (7 0 9 0 nil 0) (8 0 10 0 nil 0) (1 0 11 0 nil 0) (0 0 12 0 nil 0))) 6.0 nil) (quote nil) (om-make-point 315 12) nil nil nil "inp1-patch") (om-load-boxcall (quote patch-box) "palimpsesto-flt" (quote ("elements" "asd_om_work" "asd_utilities" "palimpsesto-flt-folder" "palimpsesto-flt")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input-1" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input-2" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TimeAdjust" nil) (om-load-inputfun (quote input-funbox) "no documentation" "Method" nil))) (om-make-point 317 240) (om-make-point 374 66) nil nil nil 1))) (quote ((9 0 8 0 nil 0) (14 0 9 0 nil 0) (12 0 10 1 nil 0) (12 1 10 2 nil 0) (12 2 10 3 nil 0) (13 0 11 1 nil 0) (13 1 11 2 nil 0) (13 2 11 3 nil 0) (11 0 14 0 nil 0) (10 0 14 1 nil 0) (4 0 14 2 nil 3) (6 0 14 3 nil 3))) nil 6.0))
