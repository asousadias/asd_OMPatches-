; OM File Header - Saved 2018/05/13 4:17:19
; (6.130002 :patc (om-make-point 211 50) (om-make-point 50 50) (om-make-point 995 754) "" 183 0 "2018/05/13 4:11:40" "2018/05/13 4:17:19")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"logisticMap_base.omp\"" "#P\"logisticMap_rec.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "logisticMap-help_ALL" (quote ((let ((box (om-load-boxcall (quote abstraction) "logisticMap_rec 3" (om-load-patch-abs1 "logisticMap_rec" (quote ((let ((box (om-load-boxcall (quote abstraction) "logisticMap_rec 2" (om-load-patch-abs1 "logisticMap_rec" (quote ((let ((box (om-load-boxcomment "comment1" (om-make-point 156 64) (quote "António de Sousa Dias$www.sousadias.com$rev. 2018") "" (om-make-point 421 445) nil (om-make-color 0.018735297 0.025613498 0.51131225) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 515 37) (quote "Generation of a list of values [0...1] of length n_iter, according to the logistic map.") nil (om-make-point 73 8) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 82 42) (quote "recursive component") nil (om-make-point 420 310) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "logisticMap_base" (quote ("elements" "asd_logisticmap" "logisticMap_base")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "lambda_value" nil) (om-load-inputfun (quote input-funbox) "no documentation" "x0" nil))) (om-make-point 146 190) (om-make-point 121 67) nil nil "logisticMap_base" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 99 198) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "logisticMap_rec" (quote ("elements" "asd_logisticmap" "logisticMap_rec")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "lambda_inic" nil) (om-load-inputfun (quote input-funbox) "no documentation" "inic_x" nil) (om-load-inputfun (quote input-funbox) "no documentation" "n_iter" nil))) (om-make-point 365 246) (om-make-point 119 67) nil nil "logisticMap_rec" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 469 157) (om-make-point 20 29) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 1))) (om-make-point 413 189) (om-make-point 85 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first list" "L1?" nil) (om-load-inputfun (quote input-funbox) "second list" "L2?" nil))) (om-make-point 283 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM<=" (quote om<=) (quote ((om-load-inputfun (quote input-funbox) "a number" "SELF" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM" 1))) (om-make-point 76 232) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "if" "TEST" nil) (om-load-inputfun (quote input-funbox) "then" "ACTION" nil) (om-load-inputfun (quote input-funbox) "else" "ELSE" nil))) (om-make-point 33 362) (om-make-point 418 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 219 434) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input2" 2 (om-make-point 362 59) "no documentation" "n_iter" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 208 60) "no documentation" "inic_x" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 80 60) "no documentation" "lambda_inic" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((14 0 3 0 nil 1) (13 0 3 1 nil 0) (14 0 5 0 nil 1) (3 0 5 1 nil 0) (7 0 5 2 nil 0) (12 0 7 0 nil 2) (6 0 7 1 nil 0) (3 0 8 0 nil 0) (5 0 8 1 nil 0) (12 0 9 0 nil 2) (4 0 9 1 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (8 0 10 2 nil 0) (10 0 11 0 nil 0))) 6.130002 nil "" (om-make-point 200 200) (om-make-point 679 540)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "lambda_inic" nil) (om-load-inputfun (quote input-funbox) "no documentation" "inic_x" nil) (om-load-inputfun (quote input-funbox) "no documentation" "n_iter" nil))) (om-make-point 365 246) (om-make-point 119 67) nil nil "logisticMap_rec"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "logisticMap_base 2" (om-load-patch-abs1 "logisticMap_base" (quote ((let ((box (om-load-boxcomment "comment1" (om-make-point 156 64) (quote "António de Sousa Dias$www.sousadias.com$rev. 2018") "" (om-make-point 292 222) nil (om-make-color 0.018735297 0.025613498 0.51131225) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 219 62) (quote "Logistic Map$X[i] = L * (1 - X[i-1]) * X[i-1]") nil (om-make-point 57 14) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 240 68) (om-make-point 16 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 267 98) (om-make-point 35 27) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*1" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 189 191) (om-make-point 34 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 281 142) (om-make-point 92 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 179 236) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "logistic_f" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 336 8) "no documentation" "x0" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 115 88) "no documentation" "lambda_value" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 3 0 nil 0) (7 0 3 1 nil 0) (8 0 4 0 nil 0) (5 0 4 1 nil 0) (3 0 5 0 nil 0) (7 0 5 1 nil 0) (4 0 6 0 nil 0))) 6.130002 nil "" (om-make-point 200 200) (om-make-point 510 372)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "lambda_value" nil) (om-load-inputfun (quote input-funbox) "no documentation" "x0" nil))) (om-make-point 146 190) (om-make-point 121 67) nil nil "logisticMap_base"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 156 64) (quote "António de Sousa Dias$www.sousadias.com$rev. 2018") "" (om-make-point 421 445) nil (om-make-color 0.018735297 0.025613498 0.51131225) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 515 37) (quote "Generation of a list of values [0...1] of length n_iter, according to the logistic map.") nil (om-make-point 73 8) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 82 42) (quote "recursive component") nil (om-make-point 420 310) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 99 198) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 469 157) (om-make-point 20 29) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 1))) (om-make-point 413 189) (om-make-point 85 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first list" "L1?" nil) (om-load-inputfun (quote input-funbox) "second list" "L2?" nil))) (om-make-point 283 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM<=" (quote om<=) (quote ((om-load-inputfun (quote input-funbox) "a number" "SELF" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM" 1))) (om-make-point 76 232) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "if" "TEST" nil) (om-load-inputfun (quote input-funbox) "then" "ACTION" nil) (om-load-inputfun (quote input-funbox) "else" "ELSE" nil))) (om-make-point 33 362) (om-make-point 418 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 219 434) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input2" 2 (om-make-point 362 59) "no documentation" "n_iter" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 208 60) "no documentation" "inic_x" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 80 60) "no documentation" "lambda_inic" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((14 0 0 0 nil 1) (1 0 0 1 nil 0) (7 0 0 2 nil 0) (14 0 1 0 nil 1) (13 0 1 1 nil 0) (12 0 7 0 nil 2) (6 0 7 1 nil 0) (1 0 8 0 nil 0) (0 0 8 1 nil 0) (12 0 9 0 nil 2) (5 0 9 1 nil 0) (9 0 10 0 nil 0) (1 0 10 1 nil 0) (8 0 10 2 nil 0) (10 0 11 0 nil 0))) 6.130002 nil "" (om-make-point 200 200) (om-make-point 679 540)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "lambda_inic" nil) (om-load-inputfun (quote input-funbox) "no documentation" "inic_x" nil) (om-load-inputfun (quote input-funbox) "no documentation" "n_iter" nil))) (om-make-point 466 324) nil (list (list 0.925 0.2566875 0.70595634 0.76805336 0.6591454 0.8312891 0.51891584 0.92367614 0.2608446 0.71337736 0.75653935 0.681494 0.80312175 0.58503366 0.8982463 0.33817962 0.8281125 0.5266661 0.922369 0.26493636 0.72055686 0.7450123 0.70288527 0.772699 0.6498505 0.8419159 0.49244604 0.92478884 0.25735146 0.7071502 0.7662285 0.66275287 0.8269926 0.5293807 0.9218061 0.26669458 0.7236038 0.74000496 0.7118712 0.7589092 0.67697424 0.8091164 0.57145405 0.90610904 0.3147792 0.79806507 0.5962817 0.8907004 0.36020684 0.85269416 0.46474528 0.92040134 0.27107206 0.7310904 0.7274097 0.73365385 0.7230018 0.74099976 0.71010077 0.7616734 0.67165006 0.8159842 0.55556977 0.9135744 0.292138 0.7651356 0.66490156 0.82438767 0.5356588 0.9202953 0.27140188 0.73164875 0.7264538 0.7352591 0.7202167 0.745567 0.7018783 0.77420706 0.6467988 0.84526545 0.48392954 0.9240445 0.2596892 0.71132774 0.7597602 0.6753412 0.8112452 0.5665678 0.9086043 0.3072573 0.7875459 0.61907417 0.872539 0.4114944 0.8960171 0.34473076 0.83579845 0.50778586 0.9247757 0.25739267)) nil "logisticMap_rec"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lcycle" (om-load-patch-abs1 "lcycle" (quote ((let ((box (om-load-boxcomment "comment1" (om-make-point 156 64) (quote "António de Sousa Dias$www.sousadias.com$rev. 2018") "" (om-make-point 355 14) nil (om-make-color 0.018735297 0.025613498 0.51131225) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 244 72) (quote "LCYCLE generates a list of nr_iteractions length cicling an input list (list2loop).") nil (om-make-point 80 11) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 276 277) (om-make-point 41 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 58 431) (om-make-point 447 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 121 340) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 100 265) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 364 206) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM>" (quote om>) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 0))) (om-make-point 215 294) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" 1))) (om-make-point 209 348) (om-make-point 71 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 174 216) (om-make-point 57 36) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 237 191) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 212 510) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "nr_iteractions" 1 (om-make-point 405 91) "number of cycled items" "nr_iteractions" 1 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "list2loop" 0 (om-make-point 93 102) "List to cycle until nr iteractions." "list2loop" (list 1 2 3) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 2 0 nil 0) (4 0 3 0 nil 0) (12 0 3 1 nil 1) (5 0 4 0 nil 0) (13 0 5 0 nil 0) (8 0 5 1 nil 0) (9 0 6 0 nil 0) (2 0 7 0 nil 0) (7 0 8 0 nil 0) (2 0 8 1 nil 0) (12 0 9 0 nil 1) (10 0 9 1 nil 0) (13 0 10 0 nil 0) (3 0 11 0 nil 0))) 6.130002 nil "" (om-make-point 200 200) (om-make-point 594 630)) (quote ((om-load-inputfun (quote input-funbox) "List to cycle until nr iteractions." "list2loop" nil) (om-load-inputfun (quote input-funbox) "number of cycled items" "nr_iteractions" nil))) (om-make-point 755 427) nil (list (list 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4)) nil "lcycle"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "scale2range 2" (om-load-patch-abs1 "scale2range" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 407 106) (quote "SCALE2RANGE scales an input list.$Inputs:$0 - Value [0...1]$1 - Range to scale (min max)$2 - Minimum step distance between output values$3 - Number of decimals") nil (om-make-point 71 5) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 156 64) (quote "António de Sousa Dias$www.sousadias.com$rev. 2018") "" (om-make-point 488 21) nil (om-make-color 0.018735297 0.025613498 0.51131225) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 315 428) (om-make-point 238 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 141 190) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 95 163) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 2" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 1) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 158 224) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 0) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 113 211) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MININ" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXIN" 1))) (om-make-point 51 280) (om-make-point 213 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "number of decimals" 3 (om-make-point 245 191) "Number of decimals." "number of decimals" 0 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND1" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number of decimals" "DECIMALS" 3) (om-load-inputfun (quote input-funbox) "divisor" "DIVISOR" 1))) (om-make-point 151 356) (om-make-point 295 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "step length" 2 (om-make-point 403 128) "step length: quantification value" "step length" 1.0 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 411 475) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 147 111) "range to scale (min max)" "l_interval" (list 0 12700) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 40 100) "X value to scale." "x" 0 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 2 0 nil 0) (10 0 2 1 nil 0) (3 0 5 0 nil 0) (12 0 5 1 nil 0) (4 0 6 0 nil 0) (12 0 6 1 nil 0) (13 0 7 0 nil 0) (6 0 7 1 nil 0) (5 0 7 2 nil 0) (7 0 9 0 nil 0) (8 0 9 1 nil 2) (10 0 9 2 nil 0) (2 0 11 0 nil 0))) 6.130002 nil "" (om-make-point 200 200) (om-make-point 683 569)) (quote ((om-load-inputfun (quote input-funbox) "X value to scale." "x" 0) (om-load-inputfun (quote input-funbox) "range to scale (min max)" "l_interval" (list 0 12700)) (om-load-inputfun (quote input-funbox) "divisor: quantification value" "divisor" 1) (om-load-inputfun (quote input-funbox) "Number of decimals." "number of decimals" 0))) (om-make-point 536 430) nil (list (list 120 40 100 100 80 100 80 120 40 100 100 100 100 80 120 60 100 80 120 40 100 100 100 100 80 100 80 120 40 100 100 80 100 80 120 40 100 100 100 100 100 100 80 120 60 100 80 120 60 100 60 120 40 100 100 100 100 100 100 100 100 100 80 120 60 100 80 100 80 120 40 100 100 100 100 100 100 100 80 100 80 120 40 100 100 100 100 80 120 60 100 80 120 60 120 60 100 80 120 40)) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "rtm_step 2" (om-load-patch-abs1 "rtm_step" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 349 83) (quote "RTM_STEP outputs two lists, from a list of distances (durations)$- a list of time points (on_sets)$- a list of durations (durs)") nil (om-make-point 68 6) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 101 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND2" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 204 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output1" 1 (om-make-point 297 321) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "durs" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 93 322) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "on_sets" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "l_durs" 0 (om-make-point 216 88) "list of durations (distances)" "l_durs" (list 1000) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 1 nil 0) (5 0 2 0 nil 0) (2 0 3 0 nil 0) (1 0 4 0 nil 0))) 6.130002 nil "" (om-make-point 200 200) (om-make-point 459 449)) (quote ((om-load-inputfun (quote input-funbox) "list of durations (distances)" "l_durs" (list 1000)))) (om-make-point 350 440) nil (list (list 0 250 500 800 1100 1300 1550 1850 2050 2200 2450 2750 3000 3300 3500 3700 3900 4100 4250 4550 4850 5050 5300 5450 5650 5900 6050 6250 6400 6600 6800 7000 7250 7500 7800 8000 8150 8450 8650 8800 9050 9200 9400 9550 9700 10000 10150 10450 10750 11000 11200 11500 11700 12000 12250 12500 12650 12900 13050 13250 13550 13800 14000 14250 14400 14550 14800 15100 15350 15550 15700 15950 16200 16450 16600 16850 17050 17300 17600 17750 17900 18200 18500 18750 18950 19100 19350 19500 19800 20000 20300 20600 20750 20900 21050 21200 21500 21750 21900 22050 22200) (list 250 250 300 300 200 250 300 200 150 250 300 250 300 200 200 200 200 150 300 300 200 250 150 200 250 150 200 150 200 200 200 250 250 300 200 150 300 200 150 250 150 200 150 150 300 150 300 300 250 200 300 200 300 250 250 150 250 150 200 300 250 200 250 150 150 250 300 250 200 150 250 250 250 150 250 200 250 300 150 150 300 300 250 200 150 250 150 300 200 300 300 150 150 150 150 300 250 150 150 150)) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "scale2range" (om-load-patch-abs1 "scale2range" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 407 106) (quote "SCALE2RANGE scales an input list.$Inputs:$0 - Value [0...1]$1 - Range to scale (min max)$2 - Minimum step distance between output values$3 - Number of decimals") nil (om-make-point 71 5) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 156 64) (quote "António de Sousa Dias$www.sousadias.com$rev. 2018") "" (om-make-point 488 21) nil (om-make-color 0.018735297 0.025613498 0.51131225) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 315 428) (om-make-point 238 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 141 190) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 95 163) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 2" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 1) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 158 224) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 0) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 113 211) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MININ" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXIN" 1))) (om-make-point 51 280) (om-make-point 213 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "number of decimals" 3 (om-make-point 245 191) "Number of decimals." "number of decimals" 0 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND1" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number of decimals" "DECIMALS" 3) (om-load-inputfun (quote input-funbox) "divisor" "DIVISOR" 1))) (om-make-point 151 356) (om-make-point 295 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "step length" 2 (om-make-point 403 128) "step length: quantification value" "step length" 1.0 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 411 475) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 147 111) "range to scale (min max)" "l_interval" (list 0 12700) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 40 100) "X value to scale." "x" 0 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 2 0 nil 0) (10 0 2 1 nil 0) (3 0 5 0 nil 0) (12 0 5 1 nil 0) (4 0 6 0 nil 0) (12 0 6 1 nil 0) (13 0 7 0 nil 0) (6 0 7 1 nil 0) (5 0 7 2 nil 0) (7 0 9 0 nil 0) (8 0 9 1 nil 2) (10 0 9 2 nil 0) (2 0 11 0 nil 0))) 6.130002 nil "" (om-make-point 200 200) (om-make-point 683 569)) (quote ((om-load-inputfun (quote input-funbox) "X value to scale." "x" 0) (om-load-inputfun (quote input-funbox) "range to scale (min max)" "l_interval" (list 0 12700)) (om-load-inputfun (quote input-funbox) "divisor: quantification value" "divisor" 1) (om-load-inputfun (quote input-funbox) "Number of decimals." "number of decimals" 0))) (om-make-point 110 381) nil (list (list 9200 6300 8500 7900 8800 7200 9100 6300 8500 7800 8800 7100 9100 6300 8500 7800 8900 7100 9100 6300 8500 7800 8900 7000 9100 6400 8600 7600 9000 6600 8900 7000 9100 6400 8600 7600 9000 6700 9000 6800 9000 6600 8900 7100 9100 6300 8500 7800 8900 7000 9100 6400 8600 7600 9000 6600 8900 7100 9100 6300 8600 7700 8900 6900 9100 6500 8800 7200 9100 6300 8500 7900 8800 7100 9100 6300 8500 7800 8800 7100 9100 6300 8500 7800 8900 7000 9100 6300 8600 7700 8900 6800 9100 6600 8800 7100 9100 6300 8500 7800)) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "logisticMap_rec 2" (om-load-patch-abs1 "logisticMap_rec" (quote ((let ((box (om-load-boxcall (quote abstraction) "logisticMap_rec 2" (om-load-patch-abs1 "logisticMap_rec" (quote ((let ((box (om-load-boxcomment "comment1" (om-make-point 156 64) (quote "António de Sousa Dias$www.sousadias.com$rev. 2018") "" (om-make-point 421 445) nil (om-make-color 0.018735297 0.025613498 0.51131225) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 515 37) (quote "Generation of a list of values [0...1] of length n_iter, according to the logistic map.") nil (om-make-point 73 8) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 82 42) (quote "recursive component") nil (om-make-point 420 310) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "logisticMap_base" (quote ("elements" "asd_logisticmap" "logisticMap_base")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "lambda_value" nil) (om-load-inputfun (quote input-funbox) "no documentation" "x0" nil))) (om-make-point 146 190) (om-make-point 121 67) nil nil "logisticMap_base" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 99 198) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "logisticMap_rec" (quote ("elements" "asd_logisticmap" "logisticMap_rec")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "lambda_inic" nil) (om-load-inputfun (quote input-funbox) "no documentation" "inic_x" nil) (om-load-inputfun (quote input-funbox) "no documentation" "n_iter" nil))) (om-make-point 365 246) (om-make-point 119 67) nil nil "logisticMap_rec" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 469 157) (om-make-point 20 29) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 1))) (om-make-point 413 189) (om-make-point 85 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first list" "L1?" nil) (om-load-inputfun (quote input-funbox) "second list" "L2?" nil))) (om-make-point 283 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM<=" (quote om<=) (quote ((om-load-inputfun (quote input-funbox) "a number" "SELF" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM" 1))) (om-make-point 76 232) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "if" "TEST" nil) (om-load-inputfun (quote input-funbox) "then" "ACTION" nil) (om-load-inputfun (quote input-funbox) "else" "ELSE" nil))) (om-make-point 33 362) (om-make-point 418 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 219 434) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input2" 2 (om-make-point 362 59) "no documentation" "n_iter" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 208 60) "no documentation" "inic_x" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 80 60) "no documentation" "lambda_inic" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((14 0 3 0 nil 1) (13 0 3 1 nil 0) (14 0 5 0 nil 1) (3 0 5 1 nil 0) (7 0 5 2 nil 0) (12 0 7 0 nil 2) (6 0 7 1 nil 0) (3 0 8 0 nil 0) (5 0 8 1 nil 0) (12 0 9 0 nil 2) (4 0 9 1 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (8 0 10 2 nil 0) (10 0 11 0 nil 0))) 6.130002 nil "" (om-make-point 200 200) (om-make-point 679 540)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "lambda_inic" nil) (om-load-inputfun (quote input-funbox) "no documentation" "inic_x" nil) (om-load-inputfun (quote input-funbox) "no documentation" "n_iter" nil))) (om-make-point 365 246) (om-make-point 119 67) nil nil "logisticMap_rec"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "logisticMap_base 2" (om-load-patch-abs1 "logisticMap_base" (quote ((let ((box (om-load-boxcomment "comment1" (om-make-point 156 64) (quote "António de Sousa Dias$www.sousadias.com$rev. 2018") "" (om-make-point 292 222) nil (om-make-color 0.018735297 0.025613498 0.51131225) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 219 62) (quote "Logistic Map$X[i] = L * (1 - X[i-1]) * X[i-1]") nil (om-make-point 57 14) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 240 68) (om-make-point 16 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 267 98) (om-make-point 35 27) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*1" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 189 191) (om-make-point 34 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 281 142) (om-make-point 92 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 179 236) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "logistic_f" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 336 8) "no documentation" "x0" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 115 88) "no documentation" "lambda_value" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 3 0 nil 0) (7 0 3 1 nil 0) (8 0 4 0 nil 0) (5 0 4 1 nil 0) (3 0 5 0 nil 0) (7 0 5 1 nil 0) (4 0 6 0 nil 0))) 6.130002 nil "" (om-make-point 200 200) (om-make-point 510 372)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "lambda_value" nil) (om-load-inputfun (quote input-funbox) "no documentation" "x0" nil))) (om-make-point 146 190) (om-make-point 121 67) nil nil "logisticMap_base"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 156 64) (quote "António de Sousa Dias$www.sousadias.com$rev. 2018") "" (om-make-point 421 445) nil (om-make-color 0.018735297 0.025613498 0.51131225) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 515 37) (quote "Generation of a list of values [0...1] of length n_iter, according to the logistic map.") nil (om-make-point 73 8) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 82 42) (quote "recursive component") nil (om-make-point 420 310) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 99 198) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 469 157) (om-make-point 20 29) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 1))) (om-make-point 413 189) (om-make-point 85 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first list" "L1?" nil) (om-load-inputfun (quote input-funbox) "second list" "L2?" nil))) (om-make-point 283 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM<=" (quote om<=) (quote ((om-load-inputfun (quote input-funbox) "a number" "SELF" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM" 1))) (om-make-point 76 232) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "if" "TEST" nil) (om-load-inputfun (quote input-funbox) "then" "ACTION" nil) (om-load-inputfun (quote input-funbox) "else" "ELSE" nil))) (om-make-point 33 362) (om-make-point 418 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 219 434) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input2" 2 (om-make-point 362 59) "no documentation" "n_iter" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 208 60) "no documentation" "inic_x" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 80 60) "no documentation" "lambda_inic" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((14 0 0 0 nil 1) (1 0 0 1 nil 0) (7 0 0 2 nil 0) (14 0 1 0 nil 1) (13 0 1 1 nil 0) (12 0 7 0 nil 2) (6 0 7 1 nil 0) (1 0 8 0 nil 0) (0 0 8 1 nil 0) (12 0 9 0 nil 2) (5 0 9 1 nil 0) (9 0 10 0 nil 0) (1 0 10 1 nil 0) (8 0 10 2 nil 0) (10 0 11 0 nil 0))) 6.130002 nil "" (om-make-point 200 200) (om-make-point 679 540)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "lambda_inic" nil) (om-load-inputfun (quote input-funbox) "no documentation" "inic_x" nil) (om-load-inputfun (quote input-funbox) "no documentation" "n_iter" nil))) (om-make-point 65 283) nil (list (list 0.90625 0.3079834 0.77259487 0.6368836 0.83832795 0.49131146 0.9059764 0.30878893 0.77371395 0.63466746 0.8405095 0.48594323 0.9055338 0.310091 0.77551276 0.6310861 0.84395957 0.47738284 0.90439564 0.3134326 0.7800732 0.62190134 0.8523828 0.4561206 0.8992705 0.3283637 0.79946107 0.5811711 0.8823658 0.37626186 0.85074717 0.46028957 0.9005336 0.3247015 0.79485536 0.59109366 0.87616957 0.39329967 0.86497945 0.42336378 0.88495994 0.3690462 0.8440853 0.47706932 0.9043439 0.31358427 0.78027827 0.6214848 0.85275025 0.45518136 0.89896846 0.3292376 0.8005458 0.57881177 0.88373405 0.37246215 0.8472861 0.46904728 0.90277696 0.31816888 0.78639824 0.6089132 0.86324996 0.4279293 0.88742114 0.36215514 0.83737064 0.49365634 0.9061041 0.3084131 0.7731924 0.6357014 0.8394961 0.48844123 0.9057657 0.30940893 0.7745721 0.6329619 0.8421641 0.48184848 0.90505565 0.311496 0.7774401 0.6272229 0.8475769 0.46831477 0.90261066 0.31865436 0.7870374 0.6075846 0.8642926 0.42517945 0.88595677 0.3662605 0.8414123 0.48371142 0.9052882 0.3108128 0.77650476 0.62910104)) nil "logisticMap_rec"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 353 297) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 25))) (om-make-point 311 327) (om-make-point 70 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 301 186) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 341 184) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 1) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 305 239) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 349 375) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 61 48) (quote "lambda [0...4]") "" (om-make-point 444 153) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 67 26) (quote "X0 [0...1]") "" (om-make-point 547 166) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 107 96) (quote "Try with 6 different percussive instruments on channels 1-6.") "" (om-make-point 797 417) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 156 64) (quote "António de Sousa Dias$www.sousadias.com$rev. 2018") "" (om-make-point 786 26) nil (om-make-color 0.018735297 0.025613498 0.51131225) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 654 46) (quote "NOTE: The patches SCALE2RANGE, LCYCLE and RTM_STEP are usefull to accomplish some 'musical' tasks.") "" (om-make-point 65 58) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 788 370) (om-make-point 91 30) (list 1 2 3 4 5 6) "(1 2 3 4 5 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 257 346) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 231 313) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 466 56) (quote "LOG_F_REC is the implementation of the logistic map.$Inputs: lambda [0...4]; X0 [0...1]; number of iteractions [1...n]$Output: list of n values between 0 and 1.") "" (om-make-point 69 3) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 126 30) (quote "Range: (min max)") "" (om-make-point 157 249) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 43 161) (om-make-point 52 30) 3.625 "3.625" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 141 42) (quote "nr. of iteractions [1...n]") "" (om-make-point 194 106) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 67 26) (quote "X0 [0...1]") "" (om-make-point 96 118) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 61 48) (quote "lambda [0...4]") "" (om-make-point 27 115) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux131" (quote t) (quote nil) (om-make-point 639 383) (om-make-point 34 30) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux121" (quote t) (quote nil) (om-make-point 574 341) (om-make-point 69 30) (list 20 125) "(20 125)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux111" (quote t) (quote nil) (om-make-point 552 193) (om-make-point 30 25) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 62 526) (om-make-point 857 193) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9200) (6300) (8500) (7900) (8800) (7200) (9100) (6300) (8500) (7800) (8800) (7100) (9100) (6300) (8500) (7800) (8900) (7100) (9100) (6300) (8500) (7800) (8900) (7000) (9100) (6400) (8600) (7600) (9000) (6600) (8900) (7000) (9100) (6400) (8600) (7600) (9000) (6700) (9000) (6800) (9000) (6600) (8900) (7100) (9100) (6300) (8500) (7800) (8900) (7000) (9100) (6400) (8600) (7600) (9000) (6600) (8900) (7100) (9100) (6300) (8600) (7700) (8900) (6900) (9100) (6500) (8800) (7200) (9100) (6300) (8500) (7900) (8800) (7100) (9100) (6300) (8500) (7800) (8800) (7100) (9100) (6300) (8500) (7800) (8900) (7000) (9100) (6300) (8600) (7700) (8900) (6800) (9100) (6600) (8800) (7100) (9100) (6300) (8500) (7800))) :lonset (quoteldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player scale show-stems obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos cursor-mode score-mode)) (list (quote :microplayer) nil (quote t) 0 0 2 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 283/100 nil 1000 0 (om-make-point 1233 377) (om-make-point 10 40) (quote :normal) 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 165 273) (om-make-point 103 30) (list 4800 9600) "(4800 9600)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 454 200) (om-make-point 32 28) 3.7 "3.7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 22 197) (om-make-point 37 28) 3.99 "3.99" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 215 152) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 115 146) (om-make-point 32 29) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((31 0 0 0 nil 0) (28 0 0 1 nil 0) (33 0 0 2 nil 1) (17 0 1 0 nil 0) (33 0 1 1 nil 1) (0 0 2 0 nil 0) (27 0 2 1 nil 0) (26 0 2 2 nil 0) (11 0 3 0 nil 0) (5 0 4 0 nil 0) (30 0 4 1 nil 0) (19 0 4 2 nil 0) (18 0 4 3 nil 0) (22 0 5 0 nil 0) (34 0 5 1 nil 0) (33 0 5 2 nil 1) (10 0 7 0 nil 0) (6 0 7 1 nil 0) (8 0 10 0 nil 0) (9 0 10 1 nil 0) (7 0 11 0 nil 0) (33 0 11 1 nil 1) (4 0 29 1 nil 0) (3 0 29 2 nil 0) (3 1 29 3 nil 0) (2 0 29 4 nil 0) (1 0 29 6 nil 0))) nil 6.130002))
