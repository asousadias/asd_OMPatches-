; OM File Header - Saved 2018/05/13 4:17:19
; (6.130002 :patc (om-make-point 48 157) (om-make-point 98 123) (om-make-point 679 540) "" 183 0 nil "2018/05/13 4:17:19")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"logisticMap_base.omp\"" "#P\"logisticMap_rec.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "logisticMap_rec" (quote ((let ((box (om-load-boxcomment "comment1" (om-make-point 156 64) (quote "António de Sousa Dias$www.sousadias.com$rev. 2018") "" (om-make-point 421 445) nil (om-make-color 0.018735297 0.025613498 0.51131225) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 515 37) (quote "Generation of a list of values [0...1] of length n_iter, according to the logistic map.") nil (om-make-point 73 8) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 82 42) (quote "recursive component") nil (om-make-point 420 310) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "logisticMap_base" (quote ("elements" "asd_logisticmap" "logisticMap_base")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "lambda_value" nil) (om-load-inputfun (quote input-funbox) "no documentation" "x0" nil))) (om-make-point 146 190) (om-make-point 121 67) nil nil "logisticMap_base" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 99 198) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "logisticMap_rec" (quote ("elements" "asd_logisticmap" "logisticMap_rec")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "lambda_inic" nil) (om-load-inputfun (quote input-funbox) "no documentation" "inic_x" nil) (om-load-inputfun (quote input-funbox) "no documentation" "n_iter" nil))) (om-make-point 365 246) (om-make-point 119 67) nil nil "logisticMap_rec" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 469 157) (om-make-point 20 29) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 1))) (om-make-point 413 189) (om-make-point 85 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first list" "L1?" nil) (om-load-inputfun (quote input-funbox) "second list" "L2?" nil))) (om-make-point 283 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM<=" (quote om<=) (quote ((om-load-inputfun (quote input-funbox) "a number" "SELF" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM" 1))) (om-make-point 76 232) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "if" "TEST" nil) (om-load-inputfun (quote input-funbox) "then" "ACTION" nil) (om-load-inputfun (quote input-funbox) "else" "ELSE" nil))) (om-make-point 33 362) (om-make-point 418 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 219 434) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input2" 2 (om-make-point 362 59) "no documentation" "n_iter" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 208 60) "no documentation" "inic_x" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 80 60) "no documentation" "lambda_inic" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((14 0 3 0 nil 1) (13 0 3 1 nil 0) (14 0 5 0 nil 1) (3 0 5 1 nil 0) (7 0 5 2 nil 0) (12 0 7 0 nil 2) (6 0 7 1 nil 0) (3 0 8 0 nil 0) (5 0 8 1 nil 0) (12 0 9 0 nil 2) (4 0 9 1 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (8 0 10 2 nil 0) (10 0 11 0 nil 0))) nil 6.130002))
