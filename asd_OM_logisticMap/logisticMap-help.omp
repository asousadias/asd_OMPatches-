; OM File Header - Saved 2018/05/13 4:17:19
; (6.130002 :patc (om-make-point 46 52) (om-make-point 199 23) (om-make-point 995 754) "" 183 0 nil "2018/05/13 4:16:23")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"lib_util/rtm_step.omp\"" "#P\"lib_util/lcycle.omp\"" "#P\"lib_util/scale2range.omp\"" "#P\"logisticMap_rec.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "logisticMap-help" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 353 297) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 25))) (om-make-point 311 327) (om-make-point 70 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 301 186) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 341 184) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 1) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 305 239) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 349 375) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "rtm_step" (quote ("elements" "asd_logisticmap" "lib_util" "rtm_step")) (quote ((om-load-inputfun (quote input-funbox) "list of durations (distances)" "l_durs" (list 1000)))) (om-make-point 350 440) nil (list (list 0 300 600 900 1150 1450 1750 1900 2050 2300 2500 2750 3000 3150 3300 3450 3750 3950 4150 4450 4650 4950 5200 5450 5700 6000 6300 6550 6700 6850 7000 7250 7450 7650 7800 8000 8300 8450 8650 8800 8950 9250 9400 9650 9950 10150 10400 10650 10950 11200 11400 11650 11900 12100 12350 12500 12650 12850 13050 13300 13600 13800 14050 14200 14350 14500 14750 14950 15250 15400 15600 15750 16050 16200 16400 16600 16800 17050 17300 17500 17650 17950 18100 18400 18700 18850 19050 19250 19400 19700 19950 20250 20450 20750 21000 21250 21500 21800 22050 22300 22450) (list 300 300 300 250 300 300 150 150 250 200 250 250 150 150 150 300 200 200 300 200 300 250 250 250 300 300 250 150 150 150 250 200 200 150 200 300 150 200 150 150 300 150 250 300 200 250 250 300 250 200 250 250 200 250 150 150 200 200 250 300 200 250 150 150 150 250 200 300 150 200 150 300 150 200 200 200 250 250 200 150 300 150 300 300 150 200 200 150 300 250 300 200 300 250 250 250 300 250 250 150)) nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 61 48) (quote "lambda [0...4]") nil (om-make-point 444 153) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 67 26) (quote "X0 [0...1]") nil (om-make-point 547 166) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 107 96) (quote "Try with 6 different percussive instruments on channels 1-6.") nil (om-make-point 797 417) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 156 64) (quote "António de Sousa Dias$www.sousadias.com$rev. 2018") "" (om-make-point 786 26) nil (om-make-color 0.018735297 0.025613498 0.51131225) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 654 46) (quote "NOTE: The patches SCALE2RANGE, LCYCLE and RTM_STEP are usefull to accomplish some 'musical' tasks.") nil (om-make-point 65 58) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "lcycle 2" (quote ("elements" "asd_logisticmap" "lib_util" "lcycle")) (quote ((om-load-inputfun (quote input-funbox) "List to cycle until nr iteractions." "list2loop" nil) (om-load-inputfun (quote input-funbox) "number of cycled items" "nr_iteractions" nil))) (om-make-point 755 427) nil (list (list 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4)) nil "lcycle" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 788 370) (om-make-point 91 30) (list 1 2 3 4 5 6) "(1 2 3 4 5 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 257 346) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "scale2range 3" (quote ("elements" "asd_logisticmap" "lib_util" "scale2range")) (quote ((om-load-inputfun (quote input-funbox) "X value to scale." "x" 0) (om-load-inputfun (quote input-funbox) "range to scale (min max)" "l_interval" (list 0 12700)) (om-load-inputfun (quote input-funbox) "divisor: quantification value" "divisor" 1) (om-load-inputfun (quote input-funbox) "Number of decimals." "number of decimals" 0))) (om-make-point 536 430) nil (list (list 120 40 100 100 80 100 80 120 40 100 100 100 100 80 120 60 100 80 120 40 100 100 100 100 80 100 80 120 40 100 100 80 100 80 120 40 100 100 100 100 100 100 80 120 60 100 80 120 60 100 60 120 40 100 100 100 100 100 100 100 100 100 80 120 60 100 80 100 80 120 40 100 100 100 100 100 100 100 80 100 80 120 40 100 100 100 100 80 120 60 100 80 120 60 120 60 100 80 120 40)) nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "scale2range 2" (quote ("elements" "asd_logisticmap" "lib_util" "scale2range")) (quote ((om-load-inputfun (quote input-funbox) "X value to scale." "x" 0) (om-load-inputfun (quote input-funbox) "range to scale (min max)" "l_interval" (list 0 12700)) (om-load-inputfun (quote input-funbox) "divisor: quantification value" "divisor" 1) (om-load-inputfun (quote input-funbox) "Number of decimals." "number of decimals" 0))) (om-make-point 110 381) nil (list (list 9200 6300 8500 7900 8800 7200 9100 6300 8500 7800 8800 7100 9100 6300 8500 7800 8900 7100 9100 6300 8500 7800 8900 7000 9100 6400 8600 7600 9000 6600 8900 7000 9100 6400 8600 7600 9000 6700 9000 6800 9000 6600 8900 7100 9100 6300 8500 7800 8900 7000 9100 6400 8600 7600 9000 6600 8900 7100 9100 6300 8600 7700 8900 6900 9100 6500 8800 7200 9100 6300 8500 7900 8800 7100 9100 6300 8500 7800 8800 7100 9100 6300 8500 7800 8900 7000 9100 6300 8600 7700 8900 6800 9100 6600 8800 7100 9100 6300 8500 7800)) nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 231 313) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 466 56) (quote "LOG_F_REC is the implementation of the logistic map.$Inputs: lambda [0...4]; X0 [0...1]; number of iteractions [1...n]$Output: list of n values between 0 and 1.") nil (om-make-point 69 3) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 126 30) (quote "Range: (min max)") nil (om-make-point 157 249) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 43 161) (om-make-point 52 30) 3.625 "3.625" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 141 42) (quote "nr. of iteractions [1...n]") nil (om-make-point 194 106) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 67 26) (quote "X0 [0...1]") nil (om-make-point 96 118) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 61 48) (quote "lambda [0...4]") nil (om-make-point 27 115) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux131" (quote t) (quote nil) (om-make-point 639 383) (om-make-point 34 30) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux121" (quote t) (quote nil) (om-make-point 574 341) (om-make-point 69 30) (list 20 125) "(20 125)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux111" (quote t) (quote nil) (om-make-point 552 193) (om-make-point 30 25) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "logisticMap_rec" (quote ("elements" "asd_logisticmap" "logisticMap_rec")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "lambda_inic" nil) (om-load-inputfun (quote input-funbox) "no documentation" "inic_x" nil) (om-load-inputfun (quote input-funbox) "no documentation" "n_iter" nil))) (om-make-point 466 324) nil (list (list 0.925 0.2566875 0.70595634 0.76805336 0.6591454 0.8312891 0.51891584 0.92367614 0.2608446 0.71337736 0.75653935 0.681494 0.80312175 0.58503366 0.8982463 0.33817962 0.8281125 0.5266661 0.922369 0.26493636 0.72055686 0.7450123 0.70288527 0.772699 0.6498505 0.8419159 0.49244604 0.92478884 0.25735146 0.7071502 0.7662285 0.66275287 0.8269926 0.5293807 0.9218061 0.26669458 0.7236038 0.74000496 0.7118712 0.7589092 0.67697424 0.8091164 0.57145405 0.90610904 0.3147792 0.79806507 0.5962817 0.8907004 0.36020684 0.85269416 0.46474528 0.92040134 0.27107206 0.7310904 0.7274097 0.73365385 0.7230018 0.74099976 0.71010077 0.7616734 0.67165006 0.8159842 0.55556977 0.9135744 0.292138 0.7651356 0.66490156 0.82438767 0.5356588 0.9202953 0.27140188 0.73164875 0.7264538 0.7352591 0.7202167 0.745567 0.7018783 0.77420706 0.6467988 0.84526545 0.48392954 0.9240445 0.2596892 0.71132774 0.7597602 0.6753412 0.8112452 0.5665678 0.9086043 0.3072573 0.7875459 0.61907417 0.872539 0.4114944 0.8960171 0.34473076 0.83579845 0.50778586 0.9247757 0.25739267)) nil "logisticMap_rec" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "logisticMap_rec" (quote ("elements" "asd_logisticmap" "logisticMap_rec")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "lambda_inic" nil) (om-load-inputfun (quote input-funbox) "no documentation" "inic_x" nil) (om-load-inputfun (quote input-funbox) "no documentation" "n_iter" nil))) (om-make-point 65 283) nil (list (list 0.90625 0.3079834 0.77259487 0.6368836 0.83832795 0.49131146 0.9059764 0.30878893 0.77371395 0.63466746 0.8405095 0.48594323 0.9055338 0.310091 0.77551276 0.6310861 0.84395957 0.47738284 0.90439564 0.3134326 0.7800732 0.62190134 0.8523828 0.4561206 0.8992705 0.3283637 0.79946107 0.5811711 0.8823658 0.37626186 0.85074717 0.46028957 0.9005336 0.3247015 0.79485536 0.59109366 0.87616957 0.39329967 0.86497945 0.42336378 0.88495994 0.3690462 0.8440853 0.47706932 0.9043439 0.31358427 0.78027827 0.6214848 0.85275025 0.45518136 0.89896846 0.3292376 0.8005458 0.57881177 0.88373405 0.37246215 0.8472861 0.46904728 0.90277696 0.31816888 0.78639824 0.6089132 0.86324996 0.4279293 0.88742114 0.36215514 0.83737064 0.49365634 0.9061041 0.3084131 0.7731924 0.6357014 0.8394961 0.48844123 0.9057657 0.30940893 0.7745721 0.6329619 0.8421641 0.48184848 0.90505565 0.311496 0.7774401 0.6272229 0.8475769 0.46831477 0.90261066 0.31865436 0.7870374 0.6075846 0.8642926 0.42517945 0.88595677 0.3662605 0.8414123 0.48371142 0.9052882 0.3108128 0.77650476 0.62910104)) nil "logisticMap_rec" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 62 526) (om-make-point 857 193) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9200) (6300) (8500) (7900) (8800) (7200) (9100) (6300) (8500) (7800) (8800) (7100) (9100) (6300) (8500) (7800) (8900) (7100) (9100) (6300) (8500) (7800) (8900) (7000) (9100) (6400) (8600) (7600) (9000) (6600) (8900) (7000) (9100) (6400) (8600) (7600) (9000) (6700) (9000) (6800) (9000) (6600) (8900) (7100) (9100) (6300) (8500) (7800) (8900) (7000) (9100) (6400) (8600) (7600) (9000) (6600) (8900) (7100) (9100) (6300) (8600) (7700) (8900) (6900) (9100) (6500) (8800) (7200) (9100) (6300) (8500) (7900) (8800) (7100) (9100) (6300) (8500) (7800) (8800) (7100) (9100) (6300) (8500) (7800) (8900) (7000) (9100) (6300) (8600) (7700) (8900) (6800) (9100) (6600) (8800) (7100) (9100) (6300) (8500) (7800))) :lonset (quoteldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4) (5) (6) (1) (2) (3) (4))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (score-mode cursor-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode show-stems scale player)) (list 0 (quote :normal) (om-make-point 10 40) (om-make-point 1233 377) 0 1000 nil 283/100 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 2 0 0 (quote t) nil (quote :microplayer))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 165 273) (om-make-point 103 30) (list 4800 9600) "(4800 9600)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 454 200) (om-make-point 32 28) 3.7 "3.7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 22 197) (om-make-point 37 28) 3.99 "3.99" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 215 152) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 115 146) (om-make-point 32 29) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 0 nil 0) (0 0 1 1 nil 0) (2 0 4 0 nil 0) (3 0 4 1 nil 0) (1 0 5 0 nil 0) (33 0 5 1 nil 1) (5 0 6 0 nil 0) (13 0 12 0 nil 0) (33 0 12 1 nil 1) (27 0 15 0 nil 0) (25 0 15 1 nil 0) (24 0 15 2 nil 0) (28 0 16 0 nil 0) (30 0 16 1 nil 0) (17 0 16 2 nil 0) (14 0 16 3 nil 0) (31 0 27 0 nil 0) (26 0 27 1 nil 0) (33 0 27 2 nil 1) (20 0 28 0 nil 0) (34 0 28 1 nil 0) (33 0 28 2 nil 1) (16 0 29 1 nil 0) (6 0 29 2 nil 0) (6 1 29 3 nil 0) (15 0 29 4 nil 0) (12 0 29 6 nil 0))) nil 6.130002))
